package leetcode;

public class MaxProfit_122 {
    /*
     * 给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。
     *
     * 设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。
     *
     * 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
     *
     * 示例 1:
     *
     * 输入: [7,1,5,3,6,4]
     * 输出: 7
     * 解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
     *      随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。
     * 示例 2:
     *
     * 输入: [1,2,3,4,5]
     * 输出: 4
     * 解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
     *      注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。
     *      因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
     * 示例 3:
     *
     * 输入: [7,6,4,3,1]
     * 输出: 0
     * 解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。
     */


    /**
     * 方法二：峰谷法
     * <p>
     * 假设给定的数组为：
     * <p>
     * [7, 1, 5, 3, 6, 4].
     * <p>
     * 如果我们在图表上绘制给定数组中的数字，我们将会得到：
     * <p>
     * 如果我们分析图表，那么我们的兴趣点是连续的峰和谷。
     * <p>
     * 关键是我们需要考虑到紧跟谷的每一个峰值以最大化利润。如果我们试图跳过其中一个峰值来获取更多利润，那么我们最终将失去其中一笔交易中获得的利润，从而导致总利润的降低。
     * <p>
     * 例如，在上述情况下，如果我们跳过 peak_i和 valley_j
     * ​
     * 试图通过考虑差异较大的点以获取更多的利润，获得的净利润总是会小与包含它们而获得的静利润，因为 CC 总是小于 A+B。
     */
    class Solution1 {
        public int maxProfit(int[] prices) {
            int i = 0;
            int peak, valley;
            int maxProfit = 0;
            while (i < prices.length - 1) {
                // 先找到波谷
                while (i < prices.length - 1 && prices[i] >= prices[i + 1]) {
                    i++;
                }
                valley = prices[i];
                // 从波谷出发找波峰
                while (i < prices.length - 1 && prices[i] <= prices[i + 1]) {
                    i++;
                }
                peak = prices[i];
                maxProfit += peak - valley;
            }
            return maxProfit;
        }
    }

    /**
     * 方法三：简单的一次遍历
     * <p>
     * 该解决方案遵循 方法二 的本身使用的逻辑，但有一些轻微的变化。
     * 在这种情况下，我们可以简单地继续在斜坡上爬升并持续增加从连续交易中获得的利润，
     * 而不是在谷之后寻找每个峰值。最后，我们将有效地使用峰值和谷值，但我们不需要跟踪峰值和谷值对应的成本以及最大利润，
     * 但我们可以直接继续增加加数组的连续数字之间的差值，如果第二个数字大于第一个数字，我们获得的总和将是最大利润。
     * 这种方法将简化解决方案。 这个例子可以更清楚地展现上述情况：
     * <p>
     * [1, 7, 2, 3, 6, 7, 6, 7]
     * <p>
     * 与此数组对应的图形是：
     * <p>
     * 从上图中，我们可以观察到 A+B+C 的和等于差值 D 所对应的连续峰和谷的高度之差。
     */
    class Solution2 {
        public int maxProfit(int[] prices) {
            int maxProfit = 0;
            for (int i = 0; i < prices.length - 1; i++) {
                if (prices[i] < prices[i + 1]) {
                    maxProfit += prices[i + 1] - prices[i];
                }
            }
            return maxProfit;
        }
    }
}
