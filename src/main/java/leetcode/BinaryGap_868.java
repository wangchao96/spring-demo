package leetcode;

public class BinaryGap_868 {
    /**
     * 给定一个正整数 N，找到并返回 N 的二进制表示中两个连续的 1 之间的最长距离。
     * <p>
     * 如果没有两个连续的 1，返回 0 。
     * <p>
     * <p>
     * <p>
     * 示例 1：
     * <p>
     * 输入：22
     * 输出：2
     * 解释：
     * 22 的二进制是 0b10110 。
     * 在 22 的二进制表示中，有三个 1，组成两对连续的 1 。
     * 第一对连续的 1 中，两个 1 之间的距离为 2 。
     * 第二对连续的 1 中，两个 1 之间的距离为 1 。
     * 答案取两个距离之中最大的，也就是 2 。
     * 示例 2：
     * <p>
     * 输入：5
     * 输出：2
     * 解释：
     * 5 的二进制是 0b101 。
     * 示例 3：
     * <p>
     * 输入：6
     * 输出：1
     * 解释：
     * 6 的二进制是 0b110 。
     * 示例 4：
     * <p>
     * 输入：8
     * 输出：0
     * 解释：
     * 8 的二进制是 0b1000 。
     * 在 8 的二进制表示中没有连续的 1，所以返回 0 。
     * <p>
     * <p>
     * 提示：
     * <p>
     * 1 <= N <= 10^9
     */

    /**
     * 方法一：存储索引
     * 思路
     * <p>
     * 由于我们想要检查数字 N 的二进制表示法中连续的 1 之间的距离，让我们先记录下该二进制表示中每个 1 的索引。
     * 例如，如果 N = 22 = 0b10110，那么我们将记录 A = [1, 2, 4]。这使得我们可以容易地继续，原问题被转换为关于数组中相邻值的问题。
     * <p>
     * 算法
     * <p>
     * 创建一个关于索引 i 的列表 A， N 在第 i 位上的值为 1。
     * <p>
     * 有了这个数组 A，找到连续的 1 之间的距离就变得容易得多：它会是这个数组相邻值之间的最大差值。
     * <p>
     * 复杂度分析
     * <p>
     * 时间复杂度：O(logN)，注意 logN 是 N 的二进制表示的位数。
     * <p>
     * 空间复杂度：O(logN)，为数组 A 用掉的空间。
     */
    class Solution1 {
        public int binaryGap(int N) {
            int[] A = new int[32];
            int t = 0;
            for (int i = 0; i < 32; ++i)
                if (((N >> i) & 1) != 0)
                    A[t++] = i;

            int ans = 0;
            for (int i = 0; i < t - 1; ++i)
                ans = Math.max(ans, A[i + 1] - A[i]);
            return ans;
        }
    }

    /**
     * 方法二：一次遍历
     * 思路
     * <p>
     * 在方法一中，我们创建了一个关于索引 i 的数组 A，其中 N 在第 i 位上的值为 1。
     * <p>
     * 因为我们只关心数组 A 中连续的值，所以我们不需要存储整个数组。我们只需要记住看到的最后一个值。
     * <p>
     * 算法
     * <p>
     * 我们将存储 last，这是被添加到虚拟数组 A 中的最后一个值。如果 N 的第 i 位（此处应当有索引 last < i ）为 1，
     * 那么一个候选答案就是 i - last，然后新增到 A 的最后一个值被更新为 i，即 last = i。
     * <p>
     * 复杂度分析
     * <p>
     * 时间复杂度：O(logN)，注意 logN 是 N 的二进制表示的位数。
     * <p>
     * 空间复杂度：O(1)。
     */
    class Solution2 {
        public int binaryGap(int N) {
            int last = -1, ans = 0;
            for (int i = 0; i < 32; ++i)
                if (((N >> i) & 1) > 0) {
                    if (last >= 0)
                        ans = Math.max(ans, i - last);
                    last = i;
                }
            return ans;
        }
    }
}
